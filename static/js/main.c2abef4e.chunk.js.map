{"version":3,"sources":["components/Landing.js","firebase.service.js","js/simpleHash.js","components/Register.js","components/Accounts.js","App.js","serviceWorker.js","index.js"],"names":["Landing","react_default","a","createElement","className","react_router_dom","to","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","controller","collectionName","collection","get","acc","add","simpleHash","password","hash","i","length","charCodeAt","Register","_useState","useState","name","email","password2","registered","_useState2","Object","slicedToArray","formData","setFormData","onChange","e","objectSpread","defineProperty","target","value","onSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","preventDefault","alert","username","stop","_x","apply","this","arguments","react_router","react","type","placeholder","required","minLength","Accounts","accounts","accountsData","setAccountsData","then","querySnapshot","toConsumableArray","docs","map","doc","id","data","account","key","concat","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2abef4e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Landing = () => {\r\n  return (\r\n    <section className='landing'>\r\n      <div className='dark-overlay'>\r\n        <div className='landing-inner'>\r\n          <h1 className='x-large'>Accounts in Firebase</h1>\r\n          <p className='lead'>\r\n            Create your account and look through already created accounts\r\n          </p>\r\n          <div className='buttons'>\r\n            <Link to='/register' className='btn btn-primary'>\r\n              Create account\r\n            </Link>\r\n            <Link to='/accounts' className='btn btn-light'>\r\n              View accounts\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyDKdfGnM9INZU91zQUOCsyH4-QoRmhHR3A',\r\n  authDomain: 'fir-solutions-4841b.firebaseapp.com',\r\n  databaseURL: 'https://fir-solutions-4841b.firebaseio.com',\r\n  projectId: 'fir-solutions-4841b',\r\n  storageBucket: 'fir-solutions-4841b.appspot.com',\r\n  messagingSenderId: '42574681663',\r\n  appId: '1:42574681663:web:152b7faab3a80e7c'\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nconst db = firebase.firestore();\r\n\r\nexport const controller = {\r\n  getAccounts: collectionName => db.collection(collectionName).get(),\r\n  addAccount: (collectionName, acc) => {\r\n    firebase\r\n      .firestore()\r\n      .collection(collectionName)\r\n      .add(acc);\r\n  }\r\n};\r\n","const simpleHash = password => {\r\n  let hash = 0;\r\n  for (let i = 0; i < password.length; i++) {\r\n    const char = password.charCodeAt(i);\r\n    hash = (hash << 5) - hash + char;\r\n    hash = hash & hash;\r\n  }\r\n  return hash;\r\n};\r\n\r\nexport default simpleHash;\r\n","import React, { Fragment, useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { controller } from '../firebase.service';\r\nimport simpleHash from '../js/simpleHash';\r\n\r\nconst Register = () => {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    password2: '',\r\n    registered: false\r\n  });\r\n\r\n  const { name, email, password, password2 } = formData;\r\n  const onChange = e =>\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  const onSubmit = async e => {\r\n    e.preventDefault();\r\n    if (password !== password2) {\r\n      alert('Passwords do not match!');\r\n    } else {\r\n      controller.addAccount('accounts', {\r\n        username: formData.name,\r\n        email: formData.email,\r\n        password: simpleHash(formData.password)\r\n      });\r\n      setFormData({ ...formData, registered: true });\r\n    }\r\n  };\r\n\r\n  if (formData.registered) {\r\n    return <Redirect to='/accounts' />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <section className='container'>\r\n        <h1 className='large text-primary'>Sign Up</h1>\r\n        <p className='lead'>\r\n          <i className='fas fa-user' /> Create Your Account\r\n        </p>\r\n        <form className='form' onSubmit={e => onSubmit(e)}>\r\n          <div className='form-group'>\r\n            <input\r\n              type='text'\r\n              placeholder='Name'\r\n              name='name'\r\n              value={name}\r\n              onChange={e => onChange(e)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className='form-group'>\r\n            <input\r\n              type='email'\r\n              placeholder='Email Address'\r\n              name='email'\r\n              value={email}\r\n              onChange={e => onChange(e)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className='form-group'>\r\n            <input\r\n              type='password'\r\n              placeholder='Password'\r\n              name='password'\r\n              value={password}\r\n              minLength='6'\r\n              onChange={e => onChange(e)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className='form-group'>\r\n            <input\r\n              type='password'\r\n              placeholder='Confirm Password'\r\n              name='password2'\r\n              minLength='6'\r\n              value={password2}\r\n              onChange={e => onChange(e)}\r\n              required\r\n            />\r\n          </div>\r\n          <input type='submit' className='btn btn-primary' value='Register' />\r\n        </form>\r\n      </section>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React, { Fragment, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { controller } from '../firebase.service';\r\n\r\nconst Accounts = () => {\r\n  const [accountsData, setAccountsData] = useState({\r\n    accounts: []\r\n  });\r\n\r\n  controller.getAccounts('accounts').then(querySnapshot => {\r\n    setAccountsData({\r\n      accounts: [...querySnapshot.docs].map(doc => ({\r\n        id: doc.id,\r\n        data: doc.data()\r\n      }))\r\n    });\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <section className='container'>\r\n        <h1 className='large text-primary'>Firebase developers</h1>\r\n        <p className='lead'>\r\n          <i className='fab fa-connectdevelop'>All created accounts</i>\r\n        </p>\r\n        <div className='profiles'>\r\n          {accountsData.accounts.length > 0 ? (\r\n            accountsData.accounts.map(account => (\r\n              <div className='accounts bg-light' key={account.id}>\r\n                <div>\r\n                  <p>{`Username: ${account.data.username}`}</p>\r\n                  <p>{`Email: ${account.data.email}`}</p>\r\n                  <p>{`Hashed password: ${account.data.password}`}</p>\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <h4> No accounts found...</h4>\r\n          )}\r\n        </div>\r\n        <Link to={`/`} className='btn btn-primary'>\r\n          Go Back\r\n        </Link>\r\n      </section>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Accounts;\r\n","import React, { Fragment } from 'react';\r\nimport './App.css';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Landing from './components/Landing';\r\nimport Register from './components/Register';\r\nimport Accounts from './components/Accounts';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Fragment>\r\n        <Switch>\r\n          <Route exact path='/' component={Landing} />\r\n          <Route exact path='/register' component={Register} />\r\n          <Route exact path='/accounts' component={Accounts} />\r\n        </Switch>\r\n      </Fragment>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}